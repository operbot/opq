#!/usr/bin/env python3
# This file is placed in the Public Domain.


"object programming queue"


import os
import readline
import sys
import termios
import time
import traceback


sys.path.insert(0, os.getcwd())


from opq.default import Default
from opq.message import Message
from opq.objects import update
from opq.handler import Handler, command, parse_cli, scan
from opq.modules import cmd, fnd, irc, rss, tdo
from opq.storage import Storage
from opq.threads import launch
from opq.utility import wait


Storage.workdir = os.path.expanduser("~/.opq")


scan(cmd)
scan(fnd)
scan(irc)
scan(rss)
scan(tdo)


class CLI(Handler):

    def announce(self, txt):
        pass

    def raw(self, txt):
        print(txt)
        sys.stdout.flush()


class Console(CLI):

    def handle(self, event):
        CLI.handle(self, event)
        event.wait()

    def poll(self):
        event = Message()
        event.txt = input("> ")
        event.orig = repr(self)
        return event


def waiter():
    got = []
    for ex in Handler.errors:
        traceback.print_exception(type(ex), ex, ex.__traceback__)
        got.append(ex)
    for exc in got:
        Handler.errors.remove(exc)


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)
        waiter()


def main():
    evt = parse_cli(" ".join(sys.argv[1:]))
    cli = CLI()
    if evt.txt:
        return command(cli, evt.otxt)
    elif "c" in evt.opts:
        date = time.ctime(time.time()).replace("  ", " ")
        print(f"OPQ started {date}")
        irc.init()
        rss.init()
        csl = Console()
        csl.start()
        wait(waiter)


wrap(main)
