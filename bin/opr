#!/usr/bin/env python3
# This file is placed in the Public Domain.


"object programming runtime"


import os
import readline
import sys
import termios
import time
import traceback


sys.path.insert(0, os.getcwd())


from opq.default import Default
from opq.storage import Wd


from opr.bus import Bus
from opr.cfg import Config
from opr.cmd import Commands
from opr.evt import Event
from opr.hdl import Handler
from opr.scn import scan
from opr.thr import launch
from opr.utl import privileges, wait


from mod import cmd, fnd, irc, log, rss


Cfg = Config()
Wd.workdir = os.path.expanduser("~/.opr")


scan(cmd)
scan(fnd)
scan(irc)
scan(log)
scan(rss)


class CLI(Handler):

    @staticmethod
    def announce(txt):
        pass

    @staticmethod
    def raw(txt):
        print(txt)
        sys.stdout.flush()


class Console(CLI):

    def handle(self, event):
        Commands.dispatch(event)
        event.wait()

    def poll(self):
        event = Event()
        event.orig = repr(self)
        event.txt = input("> ")
        return event


def daemon():
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    os.umask(0)
    sis = open("/dev/null", 'r')
    os.dup2(sis.fileno(), sys.stdin.fileno())
    sos = open("/dev/null", 'a+')
    ses = open("/dev/null", 'a+')
    os.dup2(sos.fileno(), sys.stdout.fileno())
    os.dup2(ses.fileno(), sys.stderr.fileno())


def waiter():
    got = []
    for ex in Commands.errors:
        traceback.print_exception(type(ex), ex, ex.__traceback__)
        got.append(ex)
    for exc in got:
        Commands.errors.remove(exc)


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)
        waiter()


def main():
    Cfg.parse(" ".join(sys.argv[1:]))
    if Cfg.txt:
        e = Event()
        e.type = "command"
        e.txt = Cfg.otxt
        cli = CLI()
        cli.handle(e)
        Cfg.wait = False
        e.wait()
    elif "d" in Cfg.opts:
        privileges("opr")
        daemon()
        Cfg.wait = True
    elif "c" in Cfg.opts:
        date = time.ctime(time.time()).replace("  ", " ")
        print(f"OPR started {date}")
        csl = Console()
        csl.start()
        irc.init()
        rss.init()
        Cfg.wait = True
    if Cfg.wait:
        wait(waiter)


wrap(main)
