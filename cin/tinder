#!/usr/bin/env python3
# This file is placed in the Public Domain.


"tinder"


import os
import random
import shutil
import sys
import termios
import time
import traceback
import _thread


sys.path.insert(0, os.getcwd())


from opq.clients import Client
from opq.command import Command, scan 
from opq.default import Default
from opq.message import Message
from opq.objects import Object, tostr, update
from opq.handler import Handler
from opq.threads import launch
from opq.utility import elapsed, locked, spl, wait


from modules import cmd, flt, fnd, irc, log, rss, tdo, thr
from modules.storage import Storage


Storage.workdir = ".test"


scan(cmd)
scan(flt)
scan(fnd)
scan(irc)
scan(log)
scan(rss)
scan(tdo)
scan(thr)


Cfg = Default()
Cfg.debug = True
Cfg.name = "tinder"


errors = []
events = []
paylock = _thread.allocate_lock()
rss.debug = True
results = []
starttime = time.time()


SKIP = ["debug",]


param = Object()
param.add = ["test@shell", "bart", ""]
param.cfg = ["server=localhost", ""]
param.dne = ["test4", ""]
param.rem = ["reddit", ""]
param.dpl = ["reddit title,summary,link", ""]
param.flt = ["0", ""]
param.fnd = [
             "cfg",
             "tdo",
             "rss",
             "tdo txt==test",
             "cfg server==localhost",
             "rss rss==reddit"
            ]
param.log = ["test1", ""]
param.nme = ["reddit reddit"]
param.dpl = ["reddit title,link"]
param.rem = ["reddit"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.tdo = ["test4", ""]
param.thr = [""]


class CLI(Client):

    @staticmethod
    def announce(txt):
        CLI.raw(txt)

    @staticmethod
    def raw(txt):
        if txt and "v" in Cfg.opts:
            print(txt)
            sys.stdout.flush()


@locked(paylock)
def payload(clt):
    for cmnd in Command.cmds:
        for ex in getattr(param, cmnd, [""]):
            evt = Message()
            evt.parse(cmnd + " " + ex)
            evt.orig = repr(clt)
            Command.handle(evt)


def wrap(func):
    old = termios.tcgetattr(sys.stdin.fileno())
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        cprint("")
    finally:
        termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)
        for ex in Handler.errors:
            traceback.print_exception(type(ex), ex, ex.__traceback__)


def main():
    date = time.ctime(time.time()).replace("  ", " ")
    print(f"TINDER started {date}")
    cfg = Message()
    cfg.parse(" ".join(sys.argv[1:]))
    update(Cfg, cfg)
    if os.path.exists(Storage.workdir):
        shutil.rmtree(Storage.workdir)
    nrs = Cfg.index or 1
    waiters = []
    cli = CLI()
    for _nr in range(nrs):
        waiters.append(launch(payload, cli, name=_nr))
    for wtr in waiters:
        wtr.join()
    print(elapsed(time.time() - starttime))


wrap(main)
